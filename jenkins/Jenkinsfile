pipeline {
    agent any

    environment {
        AWS_REGION = 'ap-south-1'
        APP_NAME   = 'kube-projekt'
        ECR_REPO   = "${APP_NAME}-repo"
        DOCKER_IMAGE = ''
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Terraform Init & Apply') {
            steps {
                dir('terraform') {
                    withAWS(credentials: 'aws-creds', region: "${AWS_REGION}") {
                        sh '''
                            terraform init -upgrade
                            terraform plan -out=tfplan -input=false
                            terraform apply -input=false -auto-approve tfplan
                        '''
                    }
                }
            }
        }

        stage('Prepare Kubeconfig') {
            steps {
                withAWS(credentials: 'aws-creds', region: "${AWS_REGION}") {
                    sh '''
                        aws eks update-kubeconfig --region ${AWS_REGION} --name ${APP_NAME}
                    '''
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    withAWS(credentials: 'aws-creds', region: "${AWS_REGION}") {
                        sh '''
                            ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
                            ECR_URL="${ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPO}"
                            aws ecr describe-repositories --repository-names ${ECR_REPO} || aws ecr create-repository --repository-name ${ECR_REPO}
                            aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${ECR_URL}
                            docker build -t ${ECR_URL}:latest .
                            docker push ${ECR_URL}:latest
                            echo "DOCKER_IMAGE=${ECR_URL}:latest" > docker_image.txt
                        '''
                    }
                    script {
                        DOCKER_IMAGE = readFile('docker_image.txt').trim().split('=')[1]
                    }
                }
            }
        }

        stage('Deploy with Helm') {
            steps {
                withAWS(credentials: 'aws-creds', region: "${AWS_REGION}") {
                    dir('helm-chart') {
                        sh '''
                            helm upgrade --install ${APP_NAME} . \
                                --set image.repository=${DOCKER_IMAGE%:*} \
                                --set image.tag=latest \
                                --namespace default --create-namespace
                        '''
                    }
                }
            }
        }

        stage('Verify Deployment') {
            steps {
                sh '''
                    kubectl get pods -n default
                    kubectl get svc -n default
                '''
            }
        }
    }

    post {
        failure {
            echo "❌ Pipeline failed — check logs above for details."
        }
        success {
            echo "✅ Deployment complete! App is running on EKS and exposed via LoadBalancer service."
        }
    }
}
